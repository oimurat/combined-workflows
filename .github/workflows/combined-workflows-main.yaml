name: combined-workflows-stg # ワークフロー名を決定

# トリガーの設定
on:
    push: # プッシュ(マージ)が発生したときにトリガー
        branches:
            - release # releaseブランチにプッシュされたときにトリガー

permissions:
    contents: write

env:
    OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
    OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
    OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
    OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
    OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

jobs:
    set-version-tag:
        name: Set Version Tag
        runs-on: ubuntu-latest
        outputs:
            version_tag: ${{ steps.set-tag.outputs.version_tag }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Get latest version tag
              id: set-tag
              run: |
                  # 最新の main-v 系タグを取得
                  latest_tag=$(git tag --list 'main-v*' --sort=-v:refname | head -n 1)
                  echo "Latest tag: $latest_tag"

                  if [[ "$latest_tag" =~ ^main-v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                    major=${BASH_REMATCH[1]}
                    minor=${BASH_REMATCH[2]}
                    patch=${BASH_REMATCH[3]}
                    new_tag="main-v$major.$minor.$((patch + 1))"
                  else
                    new_tag="main-v1.0.0"
                  fi

                  echo "version_tag=$new_tag" >> $GITHUB_OUTPUT

    tag-commit:
        name: Tag Commit
        needs: set-date-tag
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Git
              run: |
                  git config user.name "github-actions"
                  git config user.email "github-actions@github.com"

            - name: Create and push tag
              env:
                  VERSION_TAG: ${{ needs.set-version-tag.outputs.version_tag }}
              run: |
                  git tag $VERSION_TAG
                  git push origin $VERSION_TAG

    frontend-build-and-push: # フロントエンドのビルドとプッシュを行うジョブ
        name: Frontend Build & Push
        runs-on: ubuntu-latest
        needs: set-date-tag
        env:
            VERSION_TAG: ${{ needs.set-version-tag.outputs.version_tag }}
        steps:
            - name: Checkout repository # リポジトリをチェックアウト
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # フルクローンする

            - name: Docker build # Docker イメージをビルド
              run: docker build . --file react/Dockerfile --tag nrt.ocir.io/nrcmxxv7sjse/ec_service_test:nodejs-$DATE_TAG

            - name: Login OCIR # OCIR にログイン
              uses: oracle-actions/login-ocir@v1.3.0
              with:
                  auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

            - name: Push container image # コンテナイメージを OCIR にプッシュ
              run: docker push nrt.ocir.io/nrcmxxv7sjse/ec_service_test:nodejs-$DATE_TAG

    backend-build-and-push: # バックエンドのビルドとプッシュを行うジョブ
        name: Backend Build & Push
        runs-on: ubuntu-latest
        needs: set-date-tag
        env:
            VERSION_TAG: ${{ needs.set-version-tag.outputs.version_tag }}

        steps:
            - name: Checkout repository # リポジトリをチェックアウト
              uses: actions/checkout@v4

            - name: Docker build # Docker イメージをビルド
              run: docker build . --file fastapi/Dockerfile --tag nrt.ocir.io/nrcmxxv7sjse/ec_service_test:python-$DATE_TAG

            - name: Login OCIR # OCIR にログイン
              uses: oracle-actions/login-ocir@v1.3.0
              with:
                  auth_token: ${{ secrets.OCI_AUTH_TOKEN }}

            - name: Push container image # コンテナイメージを OCIR にプッシュ
              run: docker push nrt.ocir.io/nrcmxxv7sjse/ec_service_test:python-$DATE_TAG

    dispatch:
        name: Repository Dispatch # 他リポジトリへの接続を行うジョブ
        needs: [set-date-tag, frontend-build-and-push, backend-build-and-push]
        runs-on: ubuntu-latest
        env:
            VERSION_TAG: ${{ needs.set-version-tag.outputs.version_tag }}

        steps:
            - name: Checkout repository # リポジトリをチェックアウト
              uses: actions/checkout@v4

            - name: create github app token # GitHub Appトークンの作成
              uses: actions/create-github-app-token@v1
              id: app-token
              with:
                  app-id: ${{ secrets.APP_ID }}
                  private-key: ${{ secrets.PRIVATE_KEY }}
                  owner: ${{ github.repository_owner }}

            - name: Repository Dispatch Manifest # マニュフェストリポジトリへの接続
              uses: peter-evans/repository-dispatch@v3
              with:
                  token: ${{ steps.app-token.outputs.token }}
                  repository: oimurat/dispatch-test-githubapp # リポジトリ名を指定
                  event-type: update-manifest-stg
                  client-payload: '{"date": "${{ env.VERSION_TAG }}"}'
